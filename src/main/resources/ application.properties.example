# 애플리케이션 이름 (환경 변수 SPRING_APPLICATION_NAME 또는 기본값 'feedshop-spring-service' 사용)
spring.application.name=${SPRING_APPLICATION_NAME:feedshop-spring-service}

# 데이터베이스 연결 URL
# 개발 환경: 로컬 MySQL 또는 원격 개발 DB (DB_HOST, DB_PORT, DB_NAME 환경 변수 사용)
# 운영 환경: Google Cloud SQL (cloudSqlInstance 정보 포함)
# 이 예시에서는 일반적인 DB 연결 형식을 보여줍니다.
# Google Cloud SQL을 사용하는 경우 아래 주석 처리된 라인을 참고하세요.
spring.datasource.url=jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:feedshop_db}?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
# spring.datasource.url=jdbc:mysql://google/${DB_NAME:feedshop_db}?socketFactory=com.google.cloud.sql.mysql.SocketFactory&cloudSqlInstance=onyx-oxygen-462722-c0:asia-northeast3:feedshop-db&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8

# 데이터베이스 사용자 이름 (환경 변수 DB_USERNAME 또는 기본값 'your_db_username' 사용)
spring.datasource.username=${DB_USERNAME:your_db_username}
# 데이터베이스 비밀번호 (환경 변수 DB_PASSWORD 사용, 필수)
spring.datasource.password=${DB_PASSWORD}
# JDBC 드라이버 클래스 이름
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA/Hibernate 설정
# SQL 쿼리 콘솔 출력 여부 (개발 시 true 권장, 운영 시 false 권장)
spring.jpa.show-sql=true
# Hibernate가 생성하는 SQL 쿼리 포맷팅 여부 (개발 시 true 권장, 운영 시 false 권장)
spring.jpa.properties.hibernate.format_sql=true
# Hibernate DDL(Data Definition Language) 자동 생성/업데이트 전략
# 'validate': DB 스키마와 엔티티 매핑의 유효성 검사 (운영 권장)
# 'update': 엔티티 변경 시 DB 스키마 자동 업데이트 (개발 시 편리)
spring.jpa.hibernate.ddl-auto=update
# 사용하는 데이터베이스 방언 (MySQL 8 기준)
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Spring DevTools 재시작 기능 활성화 여부 (개발 환경에서만 사용)
# spring.devtools.restart.enabled=true

# 활성화할 Spring 프로파일 (예: dev, prod. 이 파일에서는 비워두거나 기본값을 설정하지 않습니다.)
# 이 값은 애플리케이션 실행 시 -Dspring.profiles.active=dev 또는 spring.profiles.active=prod 등으로 설정됩니다.
# spring.profiles.active=prod

# 서버 포트 (환경 변수 SERVER_PORT 또는 기본값 8080 사용)
server.port=${SERVER_PORT:8080}

# SSL 설정 (로컬 개발 환경에서 HTTPS 사용 시 필요)
# server.ssl.enabled=${SSL_ENABLED:false}
# server.ssl.key-store=${SSL_KEY_STORE:classpath:keystore.p12}
# server.ssl.key-store-password=${SSL_KEY_STORE_PASSWORD:your_keystore_password}
# server.ssl.key-store-type=${SSL_KEY_STORE_TYPE:PKCS12}
# server.ssl.key-alias=${SSL_KEY_ALIAS:springboot}
# server.ssl.client-auth=none

# 시간대 설정
spring.jackson.time-zone=Asia/Seoul
spring.jpa.properties.hibernate.jdbc.time_zone=Asia/Seoul

# 파일 업로드 설정
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
spring.servlet.multipart.file-size-threshold=2KB

# HiddenHttpMethodFilter 활성화 (PUT, DELETE 요청을 HTML 폼에서 처리할 때 사용)
spring.mvc.hiddenmethod.filter.enabled=true

# Mailgun API 설정
mailgun.api.key=${MAILGUN_API_KEY}
mailgun.domain=${MAILGUN_DOMAIN}
mailgun.from.email=${MAILGUN_EMAIL}

# Google Cloud Storage (GCS) 설정
spring.cloud.gcp.project-id=${GCS_ID}
# GCS 버킷 이름 (환경에 따라 dev/prod 버킷이 다를 수 있음)
spring.cloud.gcp.storage.bucket=${GCS_BUCKET:your-gcs-bucket-name}
spring.cloud.gcp.storage.auto-create-buckets=true
# 파일 업로드 기본 경로
file.upload.base-path=./uploads
# 파일 캐시 기간 (초 단위)
file.upload.cache-period=3600

# ReCAPTCHA 설정
# ReCAPTCHA 비밀 키 (환경 변수 RECAPTCHA_SECRET_KEY 사용)
recaptcha.secret-key=${RECAPTCHA_SECRET_KEY}
# ReCAPTCHA 점수 임계값
recaptcha.score-threshold=0.5

# 로깅 레벨 설정 (필요에 따라 조절)
logging.level.root=INFO
logging.level.org.springframework=INFO
logging.level.org.springframework.security=INFO
logging.level.com.cMall.feedShop=INFO
logging.level.com.cMall.feedShop.common.aop=INFO
# 아래는 개발 환경에서 디버깅을 위해 더 상세한 로그를 볼 때 사용
# logging.level.org.springframework=DEBUG
# logging.level.org.springframework.security=DEBUG
# logging.level.org.springframework.boot.web.embedded.tomcat=DEBUG
# logging.level.org.apache.tomcat=DEBUG
# logging.level.org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory=DEBUG

# 콘솔 로깅 패턴 (운영 환경에서는 파일 로깅을 더 중시)
# logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-}] %logger{36} - %msg%n

# 파일 로깅 설정 (운영 환경에서 로그 파일 관리에 유용)
# logging.file.name=logs/shopping-mall.log
# logging.file.max-size=100MB
# logging.file.max-history=30
# logging.file.total-size-cap=1GB

# Spring Boot Actuator 엔드포인트 노출 설정 (모든 엔드포인트 노출)
management.endpoints.web.exposure.include=*

# HikariCP 데이터베이스 풀 설정
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=60000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000

# Health Endpoint 상세 정보 노출 (운영 환경에서 모니터링에 유용)
management.endpoint.health.show-details=always

# 애플리케이션 관련 URL 설정 (환경에 따라 변경)
# 이메일 인증 URL (로컬 개발 시 localhost, 운영 시 실제 도메인)
app.verification-url=${APP_VERIFICATION_URL:https://www.yourdomain.com/api/auth/verify-email?token=}
# 비밀번호 재설정 URL (로컬 개발 시 localhost, 운영 시 실제 도메인)
app.password-reset-url=${APP_PASSWORD_RESET_URL:https://www.yourdomain.com/reset-password}

