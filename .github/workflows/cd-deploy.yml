name: Deploy to GCP Cloud Run

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: feedshop-springboot
  REGION: asia-northeast3
  IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/feedshop-springboot

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Application
        run: ./gradlew clean build -x test
        env:
          SPRING_PROFILES_ACTIVE: prod

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:$GITHUB_SHA \
                       -t $IMAGE_NAME:latest \
                       .

      - name: Push Docker Image to GCR
        run: |
          docker push $IMAGE_NAME:$GITHUB_SHA
          docker push $IMAGE_NAME:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE_NAME \
          --image $IMAGE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --add-cloudsql-instances ${{ secrets.GCP_PROJECT_ID }}:asia-northeast3:feedshop-db \
          --memory 4Gi \
          --cpu 2 \
          --concurrency 200 \
          --max-instances 10 \
          --min-instances 0 \
          --timeout=900 \
          --cpu-boost \
          --execution-environment gen2 \
          --port=8080 \
          --set-env-vars="SPRING_PROFILES_ACTIVE=prod,DB_NAME=${{ secrets.DB_NAME }},DB_USERNAME=cmall,SPRING_APPLICATION_NAME=feedshop,PORT=8080,SERVER_SSL_ENABLED=false,SERVER_ADDRESS=0.0.0.0" \
          --update-secrets="DB_PASSWORD=shopchat-db-password:latest,MAILGUN_API_KEY=mailgun_api_key:latest,MAILGUN_DOMAIN=mailgun_domain:latest,MAILGUN_EMAIL=mailgun_email:latest,GCS_ID=gcs_id:latest,GCS_BUCKET=gcs_prod_bucket:latest,JWT_SECRET=feedshop-jwt-secret-key:latest,RECAPTCHA_SECRET_KEY=recaptcha_secret_key:latest,GOOGLE_CLIENT_ID=google_client_id:latest,GOOGLE_CLIENT_SECRET=google_client_secret:latest,KAKAO_CLIENT_ID=kakao_client_id:latest,KAKAO_CLIENT_SECRET=kakao_client_secret:latest,OPENAI_API_KEY=openAI_api_key:latest"

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60
          
          # 서비스 상태 확인
          gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.conditions[0].status,status.conditions[0].message)"

      - name: Check deployment status and logs
        if: failure()
        run: |
          echo "=== Deployment failed, checking logs ==="
          
          # 최근 로그 확인
          gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=$SERVICE_NAME" \
            --limit=50 \
            --format="table(timestamp,severity,textPayload)" \
            --freshness=10m
          
          echo "=== Service Status ==="
          gcloud run services describe $SERVICE_NAME --region=$REGION --format="yaml(status)"

      - name: Get Service URL
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
          echo "Service deployed at: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: Health Check
        run: |
          echo "Waiting for service to be ready..."
          sleep 180  # Spring Boot + AI 초기화 시간 고려
          
          for i in {1..15}; do
            echo "Health check attempt $i/15..."
            if curl -f --max-time 120 --connect-timeout 60 "$SERVICE_URL/actuator/health" || curl -f --max-time 120 --connect-timeout 60 "$SERVICE_URL/"; then
              echo "✅ Deployment successful and service is healthy!"
              exit 0
            else
              echo "❌ Health check failed, retrying in 45 seconds..."
              sleep 45
            fi
          done
          
          echo "❌ Health check failed after 15 attempts"
          echo "Checking recent logs..."
          gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=$SERVICE_NAME" \
            --limit=30 \
            --format="table(timestamp,severity,textPayload)" \
            --freshness=5m
          exit 1

  notification:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🚀 Deployment to Cloud Run completed successfully!"
            echo "📊 Service: ${{ env.SERVICE_NAME }}"
            echo "🌏 Region: ${{ env.REGION }}"
            echo "🔗 URL: ${{ env.SERVICE_URL }}"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi