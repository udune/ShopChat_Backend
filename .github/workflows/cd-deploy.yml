name: Deploy to GCP VM Instance

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  VM_INSTANCE_NAME: ${{ secrets.VM_INSTANCE_NAME }}
  VM_ZONE: ${{ secrets.VM_ZONE }}
  APP_NAME: feedshop-backend
  DEPLOY_PATH: /home/deploy/feedshop-backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Application
        run: ./gradlew clean build -x test
        env:
          SPRING_PROFILES_ACTIVE: prod

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Create deployment package
        run: |
          echo "Creating deployment package..."
          mkdir -p deploy-package

          # JAR ÌååÏùº Î≥µÏÇ¨
          cp build/libs/*.jar deploy-package/app.jar

          # ÌôòÍ≤Ω Î≥ÄÏàò ÌååÏùº ÏÉùÏÑ±
          cat > deploy-package/.env << EOF
          # Spring App
          SPRING_APPLICATION_NAME=feedShop

          # DB Connection
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          # JWT
          JWT_SECRET=${{ secrets.JWT_SECRET }}

          # Mailgun
          MAILGUN_API_KEY=${{ secrets.MAILGUN_API_KEY }}
          MAILGUN_DOMAIN=${{ secrets.MAILGUN_DOMAIN }}
          MAILGUN_EMAIL=${{ secrets.MAILGUN_EMAIL }}

          # GCS
          GCS_ID=${{ secrets.GCS_ID }}
          GCS_BUCKET=${{ secrets.GCS_BUCKET }}

          # OAuth
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}

          # Other
          RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          APP_VERIFICATION_URL=${{ secrets.APP_VERIFICATION_URL }}
          APP_CDN_BASE_URL=${{ secrets.APP_CDN_BASE_URL }}
          EOF

          # docker-compose.yml ÏÉùÏÑ±
          cat > deploy-package/docker-compose.yml << 'EOF'
          services:
            feedshop-backend:
              build: .
              container_name: feedshop-backend
              ports:
                - "8080:8080"
              env_file:
                - .env
              networks:
                - feedshop-network
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 60s

          networks:
            feedshop-network:
              driver: bridge
          EOF

          # Dockerfile Î≥µÏÇ¨
          cp Dockerfile deploy-package/

          # Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±
          cat > deploy-package/deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "=== FeedShop Backend Deployment Starting ==="
          echo "Timestamp: $(date)"

          # ÌòÑÏû¨ Ïª®ÌÖåÏù¥ÎÑà ÏÉÅÌÉú ÌôïÏù∏
          echo "Current container status:"
          sudo docker-compose ps || true

          # Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Ï§ëÏßÄ
          echo "Stopping existing containers gracefully..."
          sudo docker-compose down --remove-orphans || true

          # Ïù¥ÎØ∏ÏßÄ Ï†ïÎ¶¨
          echo "Cleaning up old images..."
          sudo docker system prune -f || true

          # ÏÉà Ïª®ÌÖåÏù¥ÎÑà ÎπåÎìú Î∞è ÏãúÏûë
          echo "Building and starting new containers..."
          sudo docker-compose up -d --build

          # Ïª®ÌÖåÏù¥ÎÑà ÏãúÏûë ÎåÄÍ∏∞
          echo "Waiting for container to start..."
          sleep 30

          # Ìó¨Ïä§ Ï≤¥ÌÅ¨
          echo "Performing health check..."
          for i in {1..10}; do
            if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
              echo "üéâ Deployment completed successfully!"
              sudo docker-compose logs --tail=20 feedshop-backend
              exit 0
            else
              echo "‚è≥ Health check attempt $i/10... (waiting 30s)"
              if [ $i -lt 10 ]; then
                sleep 30
              fi
            fi
          done

          echo "‚ùå Health check failed!"
          echo "=== Container logs ==="
          sudo docker-compose logs feedshop-backend
          exit 1
          EOF

          chmod +x deploy-package/deploy.sh

      - name: Copy files to VM instance
        run: |
          echo "Copying deployment package to VM..."
          
          # VMÏóê Î∞∞Ìè¨ ÎîîÎ†âÌÑ∞Î¶¨ ÏÉùÏÑ±
          gcloud compute ssh $VM_INSTANCE_NAME \
            --zone=$VM_ZONE \
            --command="sudo mkdir -p $DEPLOY_PATH && sudo chown -R \$USER:\$USER $DEPLOY_PATH"
          
          # ÌååÏùº Î≥µÏÇ¨
          gcloud compute scp --recurse deploy-package/* \
            $VM_INSTANCE_NAME:$DEPLOY_PATH \
            --zone=$VM_ZONE

      - name: Deploy application on VM
        run: |
          echo "Deploying application on VM..."
          
          gcloud compute ssh $VM_INSTANCE_NAME \
            --zone=$VM_ZONE \
            --command="
              cd $DEPLOY_PATH && 
              echo '=== Starting deployment ===' &&
              chmod +x deploy.sh &&
              ./deploy.sh
            "

      - name: Verify deployment and setup monitoring
        run: |
          echo "Setting up external access and final verification..."
          
          # VMÏùò Ïô∏Î∂Ä IP Í∞ÄÏ†∏Ïò§Í∏∞
          VM_EXTERNAL_IP=$(gcloud compute instances describe $VM_INSTANCE_NAME \
            --zone=$VM_ZONE \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          
          echo "VM External IP: $VM_EXTERNAL_IP"
          
          # Î∞©ÌôîÎ≤Ω Í∑úÏπô ÌôïÏù∏/ÏÉùÏÑ±
          if ! gcloud compute firewall-rules describe allow-feedshop-8080 > /dev/null 2>&1; then
            echo "Creating firewall rule for port 8080..."
            gcloud compute firewall-rules create allow-feedshop-8080 \
              --allow tcp:8080 \
              --source-ranges 0.0.0.0/0 \
              --description "Allow FeedShop backend on port 8080"
          fi
          
          # ÏÑúÎπÑÏä§ URL ÏÑ§Ï†ï
          SERVICE_URL="http://$VM_EXTERNAL_IP:8080"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
          
          echo ""
          echo "üîó Service URL: $SERVICE_URL"
          echo "üìä Health Check: $SERVICE_URL/actuator/health"
          echo "üìñ API Docs: $SERVICE_URL/swagger-ui/index.html"
          echo ""
          
          # Ïô∏Î∂ÄÏóêÏÑú ÏµúÏ¢Ö Ìó¨Ïä§Ï≤¥ÌÅ¨ (5Î∂Ñ ÎåÄÍ∏∞)
          echo "Performing external health check..."
          sleep 60  # Ï∂îÍ∞Ä ÎåÄÍ∏∞ ÏãúÍ∞Ñ
          
          for i in {1..5}; do
            if curl -f --connect-timeout 10 --max-time 30 "$SERVICE_URL/actuator/health" > /dev/null 2>&1; then
              echo "‚úÖ External health check passed!"
              break
            else
              echo "‚è≥ External health check attempt $i/5..."
              if [ $i -eq 5 ]; then
                echo "‚ö†Ô∏è External health check failed, but deployment may still be successful"
                echo "Please check manually: $SERVICE_URL/actuator/health"
              else
                sleep 60
              fi
            fi
          done

  notification:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üöÄ Deployment to VM completed successfully!"
            echo "üìä Instance: ${{ env.VM_INSTANCE_NAME }}"
            echo "üåè Zone: ${{ env.VM_ZONE }}"
            echo "üîó URL: ${{ env.SERVICE_URL }}"
            echo ""
            echo "üîç Next steps:"
            echo "1. Check service health: ${{ env.SERVICE_URL }}/actuator/health"
            echo "2. View API docs: ${{ env.SERVICE_URL }}/swagger-ui/index.html"
            echo "3. Monitor logs: gcloud compute ssh ${{ env.VM_INSTANCE_NAME }} --zone=${{ env.VM_ZONE }} --command='sudo docker-compose -f ${{ env.DEPLOY_PATH }}/docker-compose.yml logs -f feedshop-backend'"
          else
            echo "‚ùå Deployment failed!"
            echo "Please check the deployment logs and troubleshoot."
            exit 1
          fi