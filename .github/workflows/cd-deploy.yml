name: Deploy to GCP VM Instance


on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  VM_INSTANCE_NAME: ${{ secrets.VM_INSTANCE_NAME }}
  VM_ZONE: ${{ secrets.VM_ZONE }}
  APP_NAME: feedshop-backend
  DEPLOY_PATH: /home/deploy/feedshop-backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Application
        run: ./gradlew clean build -x test
        env:
          SPRING_PROFILES_ACTIVE: prod

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Create deployment package
        run: |
          echo "Creating deployment package..."
          mkdir -p deploy-package
          
          # JAR 복사 (이름을 app.jar로 고정)
          cp build/libs/*.jar deploy-package/app.jar
          
          # Dockerfile 복사
          cp Dockerfile deploy-package/

          # docker-compose.yml 생성 (version 키 제거)
          cat > deploy-package/docker-compose.yml << 'EOF'
          services:
            feedshop-backend:
              build:
                context: .
                dockerfile: Dockerfile
              container_name: feedshop-backend
              ports:
                - "8080:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=prod
                - SPRING_DATASOURCE_URL=jdbc:mysql://${{ secrets.VM_DB_HOST }}:${{ secrets.VM_DB_PORT }}/${{ secrets.DB_NAME }}?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
                - SPRING_DATASOURCE_USERNAME=${{ secrets.VM_DB_USERNAME }}
                - SPRING_DATASOURCE_PASSWORD=${{ secrets.VM_DB_PASSWORD }}
                - SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver
                - JWT_SECRET=${{ secrets.JWT_SECRET }}
                - MAILGUN_API_KEY=${{ secrets.MAILGUN_API_KEY }}
                - MAILGUN_DOMAIN=${{ secrets.MAILGUN_DOMAIN }}
                - MAILGUN_EMAIL=${{ secrets.MAILGUN_EMAIL }}
                - MAILGUN_FROM_EMAIL=${{ secrets.MAILGUN_FROM_EMAIL }}
                - MAILGUN_FROM_NAME=${{ secrets.MAILGUN_FROM_NAME }}
                - GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
                - GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
                - KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
                - KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
                - RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}
                - OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
                - SPRING_AI_OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
                - APP_VERIFICATION_URL=${{ secrets.APP_VERIFICATION_URL }}
                - APP_CDN_BASE_URL=${{ secrets.APP_CDN_BASE_URL }}
                - APP_PASSWORD_RESET_URL=${{ secrets.APP_PASSWORD_RESET_URL }}
                - GCS_ID=${{ secrets.GCS_ID }}
                - GCS_BUCKET=${{ secrets.GCS_BUCKET }}
                - APP_OAUTH2_AUTHORIZED_REDIRECT_URI=${{ secrets.APP_OAUTH2_AUTHORIZED_REDIRECT_URI }}
                - SPRING_CLOUD_GCP_PROJECT_ID=${{ secrets.SPRING_CLOUD_GCP_PROJECT_ID }}
                - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID=${{ secrets.SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID }}
                - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET=${{ secrets.SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET }}
                - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_REDIRECT_URI=${{ secrets.SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_REDIRECT_URI }}
                - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_CLIENT_ID=${{ secrets.SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_CLIENT_ID }}
                - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_CLIENT_SECRET=${{ secrets.SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_CLIENT_SECRET }}
                - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_REDIRECT_URI=${{ secrets.SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_REDIRECT_URI }}
                - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_PROVIDER=kakao
                - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KAKAO_AUTHORIZATION_URI=https://kauth.kakao.com/oauth/authorize
                - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KAKAO_TOKEN_URI=https://kauth.kakao.com/oauth/token
                - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KAKAO_USER_INFO_URI=https://kapi.kakao.com/v2/user/me
                - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KAKAO_USER_NAME_ATTRIBUTE=id
              restart: unless-stopped
              networks:
                - feedshop-network

          networks:
            feedshop-network:
              driver: bridge
          EOF
          
          # 배포 스크립트 생성
          cat > deploy-package/deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "=== FeedShop Backend Deployment Starting ==="

          echo "Stopping existing containers..."
          sudo docker-compose down --remove-orphans || true

          echo "Cleaning up old images..."
          sudo docker image prune -f || true

          echo "Building and starting new containers..."
          sudo docker-compose up -d --build

          echo "Checking container status..."
          sleep 10
          sudo docker-compose ps
          
          echo "✅ Deployment completed!"
          EOF
          
          chmod +x deploy-package/deploy.sh

      - name: Copy files to VM instance
        run: |
          echo "Copying deployment package to VM..."
          
          # VM에 배포 디렉터리 생성
          gcloud compute ssh $VM_INSTANCE_NAME \
            --zone=$VM_ZONE \
            --command="sudo mkdir -p $DEPLOY_PATH && sudo chown -R \$USER:\$USER $DEPLOY_PATH"
          
          # 파일 복사
          gcloud compute scp --recurse deploy-package/* \
            $VM_INSTANCE_NAME:$DEPLOY_PATH \
            --zone=$VM_ZONE

      - name: Deploy application on VM
        run: |
          echo "Deploying application on VM..."
          
          gcloud compute ssh $VM_INSTANCE_NAME \
            --zone=$VM_ZONE \
            --command="
              cd $DEPLOY_PATH && 
              echo '=== Starting deployment ===' &&
              chmod +x deploy.sh &&
              ./deploy.sh
            "

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          
          # VM의 외부 IP 가져오기
          VM_EXTERNAL_IP=$(gcloud compute instances describe $VM_INSTANCE_NAME \
            --zone=$VM_ZONE \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          
          echo "VM External IP: $VM_EXTERNAL_IP"
          
          # 방화벽 규칙 확인/생성
          if gcloud compute firewall-rules describe allow-feedshop-8080 > /dev/null 2>&1; then
            echo "✅ Firewall rule exists"
          else
            echo "⚠️ Firewall rule not found. Please create manually:"
            echo "gcloud compute firewall-rules create allow-feedshop-8080 --allow tcp:8080 --source-ranges 0.0.0.0/0"
          fi
          
          # 서비스 URL 설정
          SERVICE_URL="http://$VM_EXTERNAL_IP:8080"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
          
          echo "🔗 Service URL: $SERVICE_URL"
          echo "📖 API Docs: $SERVICE_URL/swagger-ui/index.html"

  notification:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🚀 Deployment to VM completed successfully!"
            echo "📊 Instance: ${{ env.VM_INSTANCE_NAME }}"
            echo "🌏 Zone: ${{ env.VM_ZONE }}"
            echo "🔗 URL: ${{ env.SERVICE_URL }}"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi