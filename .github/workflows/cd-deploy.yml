name: Deploy to GCP VM Instance

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  VM_INSTANCE_NAME: ${{ secrets.VM_INSTANCE_NAME }}
  VM_ZONE: ${{ secrets.VM_ZONE }}
  APP_NAME: feedshop-backend
  DEPLOY_PATH: /home/deploy/feedshop-backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Application
        run: ./gradlew clean build -x test
        env:
          SPRING_PROFILES_ACTIVE: prod

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Create deployment package
        run: |
          echo "Creating deployment package..."
          mkdir -p deploy-package
          
          # JAR 파일 복사
          cp build/libs/*.jar deploy-package/app.jar
          
          # Dockerfile 복사
          cp Dockerfile deploy-package/
          
          # application.properties 생성 (prod 프로파일용)
          cat > deploy-package/application.properties << EOF
          # FeedShop Backend Production Configuration
          spring.application.name=feedshop-spring-service
          server.port=8080
          spring.profiles.active=prod
          
          # Database Configuration
          spring.datasource.url=jdbc:mysql://${{ secrets.VM_DB_HOST }}:${{ secrets.VM_DB_PORT }}/${{ secrets.DB_NAME }}?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
          spring.datasource.username=${{ secrets.VM_DB_USERNAME }}
          spring.datasource.password=${{ secrets.VM_DB_PASSWORD }}
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
          
          # JPA/Hibernate Configuration
          spring.jpa.show-sql=false
          spring.jpa.hibernate.ddl-auto=update
          spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
          spring.jpa.properties.hibernate.format_sql=false
          
          # HikariCP Configuration
          spring.datasource.hikari.maximum-pool-size=10
          spring.datasource.hikari.minimum-idle=2
          spring.datasource.hikari.connection-timeout=30000
          spring.datasource.hikari.idle-timeout=600000
          spring.datasource.hikari.max-lifetime=1800000
          
          # JWT Configuration
          jwt.secret=${{ secrets.JWT_SECRET }}
          jwt.access-token-expiration-ms=3600000
          jwt.refresh-token-expiration-ms=1209600000
          
          # Mailgun Configuration
          mailgun.api.key=${{ secrets.MAILGUN_API_KEY }}
          mailgun.domain=${{ secrets.MAILGUN_DOMAIN }}
          mailgun.from.email=${{ secrets.MAILGUN_EMAIL }}
          
          # reCAPTCHA Configuration
          recaptcha.secret-key=${{ secrets.RECAPTCHA_SECRET_KEY }}
          recaptcha.score-threshold=0.5
          
          # OpenAI Configuration
          spring.ai.openai.api-key=${{ secrets.OPENAI_API_KEY }}
          openai.api.key=${{ secrets.OPENAI_API_KEY }}
          
          # GCP Configuration
          gcp.project.id=${{ secrets.GCS_ID }}
          gcp.storage.bucket=${{ secrets.GCS_BUCKET }}
          spring.cloud.gcp.project-id=${{ secrets.GCS_ID }}
          
          # Application URLs
          app.verification-url=${{ secrets.APP_VERIFICATION_URL }}
          app.password-reset-url=${{ secrets.APP_PASSWORD_RESET_URL }}
          app.cdn.base-url=${{ secrets.APP_CDN_BASE_URL }}
          app.oauth2.authorized-redirect-uri=${{ secrets.APP_OAUTH2_AUTHORIZED_REDIRECT_URI }}
          
          # OAuth2 Client Registration - Google
          spring.security.oauth2.client.registration.google.client-id=${{ secrets.GOOGLE_CLIENT_ID }}
          spring.security.oauth2.client.registration.google.client-secret=${{ secrets.GOOGLE_CLIENT_SECRET }}
          spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
          spring.security.oauth2.client.registration.google.scope=openid,profile,email
          spring.security.oauth2.client.registration.google.redirect-uri=${{ secrets.GOOGLE_REDIRECT_URI }}
          
          # OAuth2 Client Registration - Kakao
          spring.security.oauth2.client.registration.kakao.client-id=${{ secrets.KAKAO_CLIENT_ID }}
          spring.security.oauth2.client.registration.kakao.client-secret=${{ secrets.KAKAO_CLIENT_SECRET }}
          spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
          spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email
          spring.security.oauth2.client.registration.kakao.redirect-uri=${{ secrets.KAKAO_REDIRECT_URI }}
          spring.security.oauth2.client.registration.kakao.provider=kakao
          
          # OAuth2 Provider Configuration - Kakao
          spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
          spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
          spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
          spring.security.oauth2.client.provider.kakao.user-name-attribute=id
          
          # File Upload Configuration
          spring.servlet.multipart.enabled=true
          spring.servlet.multipart.max-file-size=10MB
          spring.servlet.multipart.max-request-size=50MB
          file.upload.base-path=./uploads
          file.upload.cache-period=3600
          
          # Actuator Configuration
          management.endpoints.web.exposure.include=health,info,metrics
          management.endpoint.health.show-details=always
          
          # Timezone Configuration
          spring.jackson.time-zone=Asia/Seoul
          spring.jpa.properties.hibernate.jdbc.time_zone=Asia/Seoul
          EOF
          
          # Dockerfile 수정 (application.properties 포함하도록)
          cat > deploy-package/Dockerfile << 'EOF'
          FROM eclipse-temurin:17-jre-alpine
          
          # curl 설치 (헬스체크용)
          RUN apk add --no-cache curl
          
          WORKDIR /app
          COPY app.jar app.jar
          COPY application.properties application.properties
          
          EXPOSE 8080
          
          # JVM 옵션
          ENV JAVA_OPTS="-Xmx4g -Xms1g -XX:+UseG1GC -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -Djava.security.egd=file:/dev/./urandom -Dspring.jmx.enabled=false -Dspring.main.banner-mode=off"
          
          # 간단하게 외부 설정 파일만 사용
          ENTRYPOINT ["sh", "-c", "echo '=== FeedShop Starting ===' && echo 'JAVA_OPTS: ' $JAVA_OPTS && echo 'PORT: ' $PORT && exec java $JAVA_OPTS -Dspring.config.location=file:/app/application.properties -jar app.jar"]
          EOF
          
          # docker-compose.yml 생성 (간단한 버전)
          cat > deploy-package/docker-compose.yml << EOF
          services:
            feedshop-backend:
              build: .
              container_name: feedshop-backend
              ports:
                - "8080:8080"
              networks:
                - feedshop-network
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 60s
          
          networks:
            feedshop-network:
              driver: bridge
          EOF
          
          # 배포 스크립트 생성
          cat > deploy-package/deploy.sh << 'EOF'
          #!/bin/bash
          
          set -e
          
          echo "=== FeedShop Backend Deployment Starting ==="
          
          # 현재 컨테이너 중지 및 제거
          echo "Stopping existing containers..."
          sudo docker-compose down --remove-orphans || true
          
          # 이전 이미지 정리
          echo "Cleaning up old images..."
          sudo docker image prune -f || true
          
          # 새 컨테이너 빌드 및 시작
          echo "Building and starting new containers..."
          sudo docker-compose up -d --build
          
          # 컨테이너 상태 확인
          echo "Checking container status..."
          sleep 5
          sudo docker-compose ps
          
          # 컨테이너 로그 확인 (초기 시작 로그)
          echo "=== Container startup logs ==="
          sudo docker-compose logs --tail=20 feedshop-backend
          
          # 빠른 헬스 체크 (10번만, 30초 간격)
          echo "Performing health check (reduced attempts)..."
          for i in {1..10}; do
            if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "✅ Health check passed on attempt $i!"
              echo "🎉 Deployment completed successfully!"
              exit 0
            else
              echo "⏳ Health check attempt $i/10... (waiting 30s)"
              if [ $i -lt 10 ]; then
                sleep 30
              fi
            fi
          done
          
          # 헬스체크 실패 시 자세한 로그 출력
          echo "❌ Health check failed after 10 attempts (5 minutes)"
          echo "=== Full container logs ==="
          sudo docker-compose logs feedshop-backend
          exit 1
          EOF
          
          chmod +x deploy-package/deploy.sh

      - name: Copy files to VM instance
        run: |
          echo "Copying deployment package to VM..."
          
          # VM에 배포 디렉터리 생성
          gcloud compute ssh $VM_INSTANCE_NAME \
            --zone=$VM_ZONE \
            --command="sudo mkdir -p $DEPLOY_PATH && sudo chown -R \$USER:\$USER $DEPLOY_PATH"
          
          # 파일 복사
          gcloud compute scp --recurse deploy-package/* \
            $VM_INSTANCE_NAME:$DEPLOY_PATH \
            --zone=$VM_ZONE

      - name: Deploy application on VM
        run: |
          echo "Deploying application on VM..."
          
          gcloud compute ssh $VM_INSTANCE_NAME \
            --zone=$VM_ZONE \
            --command="
              cd $DEPLOY_PATH && 
              echo '=== Starting deployment ===' &&
              chmod +x deploy.sh &&
              ./deploy.sh
            "

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          
          # VM의 외부 IP 가져오기
          VM_EXTERNAL_IP=$(gcloud compute instances describe $VM_INSTANCE_NAME \
            --zone=$VM_ZONE \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          
          echo "VM External IP: $VM_EXTERNAL_IP"
          
          # 방화벽 규칙 확인/생성
          if ! gcloud compute firewall-rules describe allow-feedshop-8080 > /dev/null 2>&1; then
            echo "Creating firewall rule for port 8080..."
            gcloud compute firewall-rules create allow-feedshop-8080 \
              --allow tcp:8080 \
              --source-ranges 0.0.0.0/0 \
              --description "Allow FeedShop backend on port 8080"
          fi
          
          # 서비스 URL 설정
          SERVICE_URL="http://$VM_EXTERNAL_IP:8080"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
          
          echo "🔗 Service URL: $SERVICE_URL"
          echo "📊 Health Check: $SERVICE_URL/actuator/health"
          echo "📖 API Docs: $SERVICE_URL/swagger-ui/index.html"

      - name: Final health check
        run: |
          echo "Performing final health check..."
          
          # 30초 대기 (서비스 완전 시작 대기)
          sleep 30
          
          # VM에서 직접 헬스 체크
          gcloud compute ssh $VM_INSTANCE_NAME \
            --zone=$VM_ZONE \
            --command="
              echo 'Local health check:' &&
              curl -f http://localhost:8080/actuator/health || {
                echo 'Local health check failed, checking logs:' &&
                sudo docker-compose -f $DEPLOY_PATH/docker-compose.yml logs --tail=50 feedshop-backend
                exit 1
              }
            "
          
          echo "✅ Deployment verification completed!"

  notification:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🚀 Deployment to VM completed successfully!"
            echo "📊 Instance: ${{ env.VM_INSTANCE_NAME }}"
            echo "🌏 Zone: ${{ env.VM_ZONE }}"
            echo "🔗 URL: ${{ env.SERVICE_URL }}"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi