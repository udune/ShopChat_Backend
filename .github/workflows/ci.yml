name: Spring Boot CI Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # SonarCloud 분석을 위해 전체 히스토리 가져오기

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 기존에 분리되어 있던 'Clean Gradle Build Cache', 'Clean build directory', 'Run Tests', 'Build Project (without tests)' 스텝들을
      # 하나의 'Clean and Build Project' 스텝으로 통합합니다.
      # 이렇게 하면 Q클래스 생성 -> 컴파일 -> 테스트 -> 빌드 과정이 모두 한 번에 순서대로 처리됩니다.
      - name: Clean and Build Project (including Tests)
        run: ./gradlew clean build
        env:
          SPRING_PROFILES_ACTIVE: test
          APP_VERIFICATION_URL: ${{ secrets.APP_VERIFICATION_URL }}
          JWT_SECRET: ${{ secrets.TEST_JWT_SECRET }}

      - name: Generate Test Coverage Report
        run: ./gradlew jacocoTestReport

      # 빌드가 이미 'Clean and Build Project' 스텝에서 완료되었으므로, 이 스텝은 더 이상 필요하지 않습니다.
      # - name: Build Project (without tests)
      #   run: ./gradlew build -x test
      #   env:
      #     JWT_SECRET: ${{ secrets.JWT_SECRET }}
      #     APP_VERIFICATION_URL: ${{ secrets.APP_VERIFICATION_URL }}

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/test-results/test/*.xml

      - name: Upload Test Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: build/reports/jacoco/test/jacocoTestReport.xml

      # SONAR_TOKEN 디버그 스텝은 꼭 필요한 경우에만 사용
      - name: Debug SONAR_TOKEN
        run: |
          if [ -z "$SONAR_TOKEN" ]; then
            echo "SONAR_TOKEN is not set"
          else
            echo "SONAR_TOKEN is set (length: ${#SONAR_TOKEN})"
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # SonarCloud Organization secret이 올바르게 설정되었는지 확인하는 디버그 스텝 추가
      - name: Debug SonarCloud Organization
        run: |
          if [ -z "${{ secrets.SONAR_ORGANIZATION }}" ]; then
            echo "SONAR_ORGANIZATION secret is NOT set or is empty!"
          else
            echo "SONAR_ORGANIZATION secret is set (length: ${{ secrets.SONAR_ORGANIZATION && secrets.SONAR_ORGANIZATION.length || 0 }})"
          fi
        env:
          SONAR_ORGANIZATION_LENGTH: ${{ secrets.SONAR_ORGANIZATION && secrets.SONAR_ORGANIZATION.length || 0 }}

      - name: Analyze with SonarCloud
        run: |
          SONAR_PARAMS=""
          # Pull Request 이벤트인 경우 PR 관련 파라미터 설정
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "--- Pull Request Event Detected ---"
            echo "PR Number: ${{ github.event.pull_request.number }}"
            echo "Head Ref: ${{ github.head_ref }}"
            echo "Base Ref: ${{ github.base_ref }}"
            echo "--- End Debug ---"
            SONAR_PARAMS="-Dsonar.pullrequest.key=${{ github.event.pull_request.number }} -Dsonar.pullrequest.branch=${{ github.head_ref }} -Dsonar.pullrequest.base=${{ github.base_ref }}"
          # Push 이벤트인 경우 브랜치 관련 파라미터 설정
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "--- Push Event Detected ---"
            echo "Branch Name: ${{ github.ref_name }}"
            echo "--- End Debug ---"
            SONAR_PARAMS="-Dsonar.branch.name=${{ github.ref_name }}"
          fi

          ./gradlew sonar \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.scm.provider=git \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.junit.reportPaths=build/test-results/test \
            -Dsonar.qualitygate.wait=false \
            $SONAR_PARAMS
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

