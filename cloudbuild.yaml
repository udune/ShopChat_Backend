steps:
  # 1단계: Gradle 빌드
  - name: 'gradle:8.10.2-jdk17'
    entrypoint: 'gradle'
    args: ['clean', 'build', '-x', 'test', '--no-daemon']
    env:
      - 'SPRING_PROFILES_ACTIVE=prod'
    timeout: 1800s

  # 2단계: Docker 이미지 빌드
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA', '.']
    timeout: 600s

  # 3단계: 이미지 푸시
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA']
    timeout: 300s

  # 4단계: Cloud Run 배포 (극도로 관대한 설정)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--add-cloudsql-instances'
      - '$PROJECT_ID:${_REGION}:${_DATABASE_INSTANCE}'
      - '--memory'
      - '8Gi'
      - '--cpu'
      - '4'
      - '--concurrency'
      - '10'              # 매우 낮은 동시성
      - '--max-instances'
      - '1'               # 단일 인스턴스
      - '--min-instances'
      - '1'               # 최소 1개 유지
      - '--timeout'
      - '1800'            # 30분 타임아웃으로 증가
      - '--cpu-boost'
      # Startup probe 설정 추가
      - '--no-use-http2'
      - '--execution-environment'
      - 'gen2'
      - '--port'
      - '8080'
      - '--service-account'
      - '818414486575-compute@developer.gserviceaccount.com'
      - '--revision-suffix'
      - 'r$SHORT_SHA'
      # 환경 변수 (최소화)
      - '--set-env-vars'
      - 'SPRING_PROFILES_ACTIVE=prod,SERVER_ADDRESS=0.0.0.0,LOGGING_LEVEL_ROOT=INFO,SPRING_JPA_HIBERNATE_DDL_AUTO=none,SPRING_MAIN_LAZY_INITIALIZATION=false,SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=30000,SPRING_DATASOURCE_HIKARI_INITIALIZATION_FAIL_TIMEOUT=30000'
      # 필수 시크릿만
      - '--update-secrets'
      - 'DB_PASSWORD=shopchat-db-password:latest,JWT_SECRET=feedshop-jwt-secret-key:latest'
    timeout: 2400s

  # 5단계: 배포 후 상세 모니터링
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "=== 배포 완료, 상세 모니터링 시작 ==="
        
        # 서비스 상태 확인
        echo "서비스 상태 확인 중..."
        gcloud run services describe ${_SERVICE_NAME} --region=${_REGION} --format="yaml(status)"
        
        # 초기 대기 (10분)
        echo "애플리케이션 초기화 대기 중... (10분)"
        for i in {1..60}; do
          echo "대기 중... $$i/60 (10초 단위)"
          sleep 10
        
          # 매 분마다 상태 확인
          if [ $$((i % 6)) -eq 0 ]; then
            echo "=== $$((i/6))분 경과: 최신 로그 확인 ==="
            gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=${_SERVICE_NAME}" \
              --limit=10 \
              --format="table(timestamp,severity,textPayload)" \
              --freshness=2m
        
            # 서비스 준비 상태 확인
            READY_STATUS=$(gcloud run services describe ${_SERVICE_NAME} --region=${_REGION} --format="value(status.conditions[0].status)")
            echo "서비스 준비 상태: $$READY_STATUS"
        
            if [ "$$READY_STATUS" = "True" ]; then
              echo "✅ 서비스가 준비되었습니다!"
              SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} --region=${_REGION} --format="value(status.url)")
              echo "서비스 URL: $$SERVICE_URL"
        
              # 간단한 헬스체크
              if curl -f --max-time 30 "$$SERVICE_URL/" 2>/dev/null; then
                echo "✅ 헬스체크 성공!"
                exit 0
              fi
            fi
          fi
        done
        
        echo "=== 10분 경과, 최종 상태 확인 ==="
        
        # 최종 로그 확인
        gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=${_SERVICE_NAME}" \
          --limit=50 \
          --format="table(timestamp,severity,textPayload)" \
          --freshness=15m
        
        # 최종 서비스 상태
        FINAL_STATUS=$(gcloud run services describe ${_SERVICE_NAME} --region=${_REGION} --format="value(status.conditions[0].status)")
        echo "최종 서비스 상태: $$FINAL_STATUS"
        
        if [ "$$FINAL_STATUS" = "True" ]; then
          echo "✅ 최종 배포 성공!"
          exit 0
        else
          echo "❌ 배포가 완료되지 않았습니다."
          exit 1
        fi
    timeout: 1800s

images:
  - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA'

options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

timeout: 7200s  # 2시간

substitutions:
  _SERVICE_NAME: feedshop-springboot
  _REGION: asia-northeast3
  _DATABASE_INSTANCE: feedshop-db