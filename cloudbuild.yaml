steps:
  # 1단계: Gradle 빌드
  - name: 'gradle:8.10.2-jdk17'
    entrypoint: 'gradle'
    args: ['clean', 'build', '-x', 'test', '--no-daemon', '--info']
    env:
      - 'SPRING_PROFILES_ACTIVE=prod'
      - 'GRADLE_OPTS=-Xmx4g -Xms1g'
    timeout: 1200s

  # 2단계: Docker 이미지 빌드
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest'
      - '.'
    timeout: 600s

  # 3단계: Container Registry에 이미지 푸시
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA']
    timeout: 300s

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest']
    timeout: 300s

  # 4단계: Cloud Run에 배포 (극도로 관대한 설정)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--add-cloudsql-instances'
      - '$PROJECT_ID:${_REGION}:${_DATABASE_INSTANCE}'
      - '--memory'
      - '8Gi'
      - '--cpu'
      - '4'
      - '--concurrency'
      - '50'  # 동시성 낮춤
      - '--max-instances'
      - '3'   # 인스턴스 수 줄임
      - '--min-instances'
      - '1'   # 콜드 스타트 방지
      - '--timeout'
      - '3600' # 1시간으로 증가
      - '--cpu-boost'
      - '--execution-environment'
      - 'gen2'
      - '--port'
      - '8080'
      - '--no-traffic'  # 트래픽 할당 안 함 (테스트용)
      - '--set-env-vars'
      - 'SPRING_PROFILES_ACTIVE=prod,SERVER_SSL_ENABLED=false,SERVER_ADDRESS=0.0.0.0,DB_NAME=feedshop_db,DB_USERNAME=cmall,SPRING_APPLICATION_NAME=feedshop,LOGGING_LEVEL_ROOT=INFO,SPRING_JPA_HIBERNATE_DDL_AUTO=validate'
      - '--update-secrets'
      - 'DB_PASSWORD=shopchat-db-password:latest,JWT_SECRET=feedshop-jwt-secret-key:latest,MAILGUN_API_KEY=mailgun_api_key:latest,MAILGUN_DOMAIN=mailgun_domain:latest,MAILGUN_EMAIL=mailgun_email:latest,GCS_ID=gcs_id:latest,GCS_BUCKET=gcs_prod_bucket:latest,RECAPTCHA_SECRET_KEY=recaptcha_secret_key:latest,GOOGLE_CLIENT_ID=google_client_id:latest,GOOGLE_CLIENT_SECRET=google_client_secret:latest,KAKAO_CLIENT_ID=kakao_client_id:latest,KAKAO_CLIENT_SECRET=kakao_client_secret:latest,OPENAI_API_KEY=openAI_api_key:latest'
    timeout: 1800s

  # 5단계: 로그 확인 및 트래픽 할당
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "=== 배포 완료, 로그 확인 시작 ==="
        
        # 10분 대기
        echo "애플리케이션 초기화 대기 중... (10분)"
        sleep 600
        
        # 최근 로그 확인
        echo "=== 최근 로그 확인 ==="
        gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=${_SERVICE_NAME}" \
          --limit=50 \
          --format="table(timestamp,severity,textPayload)" \
          --freshness=15m
        
        # 오류 로그만 확인
        echo "=== 오류 로그 확인 ==="
        gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=${_SERVICE_NAME}" \
          --limit=20 \
          --format="table(timestamp,severity,textPayload)" \
          --filter="severity>=ERROR" \
          --freshness=15m
        
        # 애플리케이션 시작 확인
        START_LOG=$(gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=${_SERVICE_NAME}" \
          --limit=20 \
          --format="value(textPayload)" \
          --filter='textPayload=~"Started.*Application"' \
          --freshness=15m)
        
        if [[ ! -z "$$START_LOG" ]]; then
          echo "✅ 애플리케이션이 시작된 것으로 보입니다!"
          echo "트래픽 할당 중..."
        
          # 트래픽 할당
          gcloud run services update-traffic ${_SERVICE_NAME} \
            --to-latest \
            --region=${_REGION}
        
          # 서비스 URL 확인
          SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} --region=${_REGION} --format="value(status.url)")
          echo "✅ 서비스 URL: $$SERVICE_URL"
        
        else
          echo "❌ 애플리케이션이 아직 시작되지 않은 것 같습니다."
          echo "상세 로그를 확인해주세요."
          exit 1
        fi
    timeout: 1200s

# 이미지 태깅
images:
  - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest'

# 빌드 옵션
options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  substitution_option: 'ALLOW_LOOSE'
  logging: CLOUD_LOGGING_ONLY
  logStreamingOption: STREAM_ON

# 빌드 타임아웃 설정
timeout: 3600s

# substitutions
substitutions:
  _SERVICE_NAME: feedshop-springboot
  _REGION: asia-northeast3
  _DATABASE_INSTANCE: feedshop-db